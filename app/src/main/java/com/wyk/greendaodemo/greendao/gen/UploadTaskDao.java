package com.wyk.greendaodemo.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import card.blink.com.fileexplore.model.UploadTask;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UPLOAD_TASK".
*/
public class UploadTaskDao extends AbstractDao<UploadTask, Long> {

    public static final String TABLENAME = "UPLOAD_TASK";

    /**
     * Properties of entity UploadTask.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Status = new Property(1, int.class, "status", false, "STATUS");
        public final static Property Switch_status = new Property(2, int.class, "switch_status", false, "SWITCH_STATUS");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property FromUrl = new Property(4, String.class, "fromUrl", false, "FROM_URL");
        public final static Property ToUrl = new Property(5, String.class, "toUrl", false, "TO_URL");
        public final static Property Index = new Property(6, long.class, "index", false, "INDEX");
        public final static Property Count = new Property(7, long.class, "count", false, "COUNT");
    };


    public UploadTaskDao(DaoConfig config) {
        super(config);
    }
    
    public UploadTaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UPLOAD_TASK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"STATUS\" INTEGER NOT NULL ," + // 1: status
                "\"SWITCH_STATUS\" INTEGER NOT NULL ," + // 2: switch_status
                "\"NAME\" TEXT," + // 3: name
                "\"FROM_URL\" TEXT," + // 4: fromUrl
                "\"TO_URL\" TEXT," + // 5: toUrl
                "\"INDEX\" INTEGER NOT NULL ," + // 6: index
                "\"COUNT\" INTEGER NOT NULL );"); // 7: count
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UPLOAD_TASK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UploadTask entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStatus());
        stmt.bindLong(3, entity.getSwitch_status());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String fromUrl = entity.getFromUrl();
        if (fromUrl != null) {
            stmt.bindString(5, fromUrl);
        }
 
        String toUrl = entity.getToUrl();
        if (toUrl != null) {
            stmt.bindString(6, toUrl);
        }
        stmt.bindLong(7, entity.getIndex());
        stmt.bindLong(8, entity.getCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UploadTask entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStatus());
        stmt.bindLong(3, entity.getSwitch_status());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String fromUrl = entity.getFromUrl();
        if (fromUrl != null) {
            stmt.bindString(5, fromUrl);
        }
 
        String toUrl = entity.getToUrl();
        if (toUrl != null) {
            stmt.bindString(6, toUrl);
        }
        stmt.bindLong(7, entity.getIndex());
        stmt.bindLong(8, entity.getCount());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UploadTask readEntity(Cursor cursor, int offset) {
        UploadTask entity = new UploadTask( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // status
            cursor.getInt(offset + 2), // switch_status
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fromUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // toUrl
            cursor.getLong(offset + 6), // index
            cursor.getLong(offset + 7) // count
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UploadTask entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStatus(cursor.getInt(offset + 1));
        entity.setSwitch_status(cursor.getInt(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFromUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setToUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIndex(cursor.getLong(offset + 6));
        entity.setCount(cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UploadTask entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UploadTask entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
